#!/usr/bin/env python
from collections import defaultdict


def solve(numbers, repeats):
    for _ in range(repeats):
        new_numbers, count, previous = [], 1, numbers[0]

        for current in numbers[1:]:
            if previous == current:
                count += 1
            else:
                new_numbers.extend((count, previous))
                count, previous = 1, current

        new_numbers.extend((count, previous))
        numbers = new_numbers

    return numbers


data = input()
numbers = list(map(int, data))

print(len(numbers := solve(numbers, 40)))
print(len(solve(numbers, 10)))


# Alternative

# Source: http://www.njohnston.ca/2010/10/a-derivation-of-conways-degree-71-look-and-say-polynomial/
elements = ["1112", "1112133", "111213322112", "111213322113", "1113", "11131", "111311222112", "111312", "11131221", "1113122112", "1113122113", "11131221131112", "111312211312", "11131221131211", "111312211312113211", "111312211312113221133211322112211213322112", "111312211312113221133211322112211213322113", "11131221131211322113322112", "11131221133112", "1113122113322113111221131221", "11131221222112", "111312212221121123222112", "111312212221121123222113", "11132", "1113222", "1113222112", "1113222113", "11133112", "12", "123222112", "123222113", "12322211331222113112211", "13", "131112", "13112221133211322112211213322112", "13112221133211322112211213322113", "13122112", "132", "13211", "132112", "1321122112", "132112211213322112", "132112211213322113", "132113", "1321131112", "13211312", "1321132", "13211321", "132113212221", "13211321222113222112", "1321132122211322212221121123222112", "1321132122211322212221121123222113", "13211322211312113211", "1321133112", "1322112", "1322113", "13221133112", "1322113312211", "132211331222113112211", "13221133122211332", "22", "3", "3112", "3112112", "31121123222112", "31121123222113", "3112221", "3113", "311311", "31131112", "3113112211", "3113112211322112", "3113112211322112211213322112", "3113112211322112211213322113", "311311222", "311311222112", "311311222113", "3113112221131112", "311311222113111221", "311311222113111221131221", "31131122211311122113222", "3113112221133112", "311312", "31132", "311322113212221", "311332", "3113322112", "3113322113", "312", "312211322212221121123222113", "312211322212221121123222112", "32112"]
evolution = [[62], [63, 61], [64], [65], [67], [68], [83, 54], [69], [70], [75], [76], [81], [77], [78], [79], [80, 28, 90], [80, 28, 89], [80, 29], [74, 28, 91], [74, 31], [71], [72], [73], [82], [85], [86], [87], [88, 91], [0], [2], [3], [1, 60, 28, 84], [4], [27], [23, 32, 60, 28, 90], [23, 32, 60, 28, 89], [6], [7], [8], [9], [20], [21], [22], [10], [18], [11], [12], [13], [14], [17], [15], [16], [19], [5, 60, 28, 91], [25], [26], [24, 28, 91], [24, 28, 66], [24, 28, 84], [24, 28, 67, 60, 28, 88], [60], [32], [39], [40], [41], [42], [37, 38], [43], [47], [53], [48], [49], [50], [51], [46, 37], [46, 54], [46, 55], [46, 56], [46, 57], [46, 58], [46, 59], [46, 32, 60, 28, 91], [44], [45], [52], [37, 28, 88], [37, 29], [37, 30], [33], [35], [34], [36]]


def solve_njohnston(sequence, repeats):
    for _ in range(repeats):
        new_sequence = defaultdict(int)

        for element, count in sequence.items():
            for new_element in evolution[element]:
                new_sequence[new_element] += count

        sequence = new_sequence

    return sequence, sum(
        len(elements[element]) * count
        for element, count in sequence.items()
    )


sequence, length = solve_njohnston({elements.index(data): 1}, 40)
print(length)
print(solve_njohnston(sequence, 10)[1])
